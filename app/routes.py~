import logging
from flask import Blueprint, render_template, request,jsonify
from app.services.gemini_service import sum_up_with_gemini
from app.services.youtube_service import extract_id_youtube, download_subtitle
import google.generativeai as genai
logging.basicConfig(filename='', level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s')
bp = Blueprint('main', __name__)

@bp.route('/', methods=['GET', 'POST'])
def index():
    summary = ""
    url = ""
    error = ""
    models = []

    try:
        # Configure sua API Key para listar os modelos
        api_key = request.form.get('api_key', '').strip()
        if api_key:
            genai.configure(api_key=api_key)
            models = [model.name for model in genai.list_models()]
            logging.info(Fore.BLUE + str(models) + Fore.RESET)
    except Exception as e:
        error = f"Erro ao carregar modelos: {str(e)}"

    if request.method == 'POST' and not error:
        url = request.form.get('youtube_url', '').strip()
        model_name = request.form.get('model_name', '').strip()

        if not api_key:
            error = "Por favor, insira a API Key do Google AI Studio"
        elif not url:
            error = "Por favor, insira a URL do YouTube"
        elif not model_name:
            error = "Por favor, selecione um modelo"
        else:
            video_id = extract_id_youtube(url)
            if not video_id:
                error = "URL do YouTube inválida"
            else:
                text_caption = download_subtitle(video_id)
                if not text_caption:
                    error = "Não foi possível baixar a legenda do vídeo"
                else:
                    text_caption = text_caption[:10000]
                    summary = sum_up_with_gemini(text_caption, api_key, model_name)

    return render_template('index.html', summary=summary, url=url, error=error, models=models)

@bp.route('/get_models', methods=['POST'])
def get_models():
    try:
        data = request.get_json()
        api_key = data.get('api_key', '').strip()
        if not api_key:
            return jsonify({'error': 'API Key não fornecida'}), 400

        genai.configure(api_key=api_key)
        # Remove o prefixo 'models/' dos nomes dos modelos
        models = [model.name.replace('models/', '') for model in genai.list_models()]
        return jsonify({'models': models})
    except Exception as e:
        return jsonify({'error': str(e)}), 500