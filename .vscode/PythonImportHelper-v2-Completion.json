[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "YouTubeTranscriptApi",
        "importPath": "youtube_transcript_api",
        "description": "youtube_transcript_api",
        "isExtraImport": true,
        "detail": "youtube_transcript_api",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "sum_up_with_gemini",
        "importPath": "app.services.gemini_service",
        "description": "app.services.gemini_service",
        "isExtraImport": true,
        "detail": "app.services.gemini_service",
        "documentation": {}
    },
    {
        "label": "extract_id_youtube",
        "importPath": "app.services.youtube_service",
        "description": "app.services.youtube_service",
        "isExtraImport": true,
        "detail": "app.services.youtube_service",
        "documentation": {}
    },
    {
        "label": "download_subtitle",
        "importPath": "app.services.youtube_service",
        "description": "app.services.youtube_service",
        "isExtraImport": true,
        "detail": "app.services.youtube_service",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app.app",
        "description": "app.app",
        "isExtraImport": true,
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sum_up_with_gemini",
        "kind": 2,
        "importPath": "app.services.gemini_service",
        "description": "app.services.gemini_service",
        "peekOfCode": "def sum_up_with_gemini(text, api_key, model_name):\n    try:\n        logging.info(Fore.BLUE + str(model_name) + Fore.RESET)\n        logging.info(Fore.BLUE + 'aaaa' + Fore.RESET)\n        genai.configure(api_key=api_key)\n        model = genai.GenerativeModel(model_name=model_name)\n        prompt = f\"\"\"Crie um resumo profissional e objetivo do seguinte curso, \n        destacando os principais pontos e insights. O resumo deve ser estruturado \n        em tópicos claros, com uma introdução, Principais Pontos e conclusão:\n        CURSO: {text}",
        "detail": "app.services.gemini_service",
        "documentation": {}
    },
    {
        "label": "extract_id_youtube",
        "kind": 2,
        "importPath": "app.services.youtube_service",
        "description": "app.services.youtube_service",
        "peekOfCode": "def extract_id_youtube(url):\n    youtube_id_match = re.match(\n        r'(https?://)?(www\\.)?(youtube|youtu|youtube-nocookie)\\.(com|be)/(watch\\?v=|embed/|v/|.+\\?v=)?([^&=%\\?]{11})',\n        url)\n    return youtube_id_match.group(6) if youtube_id_match else None\ndef download_subtitle(video_id):\n    try:\n        transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['pt', 'en'])\n        return ' '.join([entry['text'] for entry in transcript])\n    except Exception:",
        "detail": "app.services.youtube_service",
        "documentation": {}
    },
    {
        "label": "download_subtitle",
        "kind": 2,
        "importPath": "app.services.youtube_service",
        "description": "app.services.youtube_service",
        "peekOfCode": "def download_subtitle(video_id):\n    try:\n        transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['pt', 'en'])\n        return ' '.join([entry['text'] for entry in transcript])\n    except Exception:\n        return None",
        "detail": "app.services.youtube_service",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "def create_app():\n    app = Flask(__name__)\n    app.config.from_object('config.Config')\n    with app.app_context():\n        from .routes import bp as main_bp\n        app.register_blueprint(main_bp)\n    return app",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def index():\n    summary = \"\"\n    url = \"\"\n    error = \"\"\n    models = []\n    try:\n        # Configure sua API Key para listar os modelos\n        api_key = request.form.get('api_key', '').strip()\n        if api_key:\n            genai.configure(api_key=api_key)",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "get_models",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def get_models():\n    try:\n        data = request.get_json()\n        api_key = data.get('api_key', '').strip()\n        if not api_key:\n            return jsonify({'error': 'API Key não fornecida'}), 400\n        genai.configure(api_key=api_key)\n        # Remove o prefixo 'models/' dos nomes dos modelos\n        models = [model.name.replace('models/', '') for model in genai.list_models()]\n        return jsonify({'models': models})",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "bp",
        "kind": 5,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "bp = Blueprint('main', __name__)\n@bp.route('/', methods=['GET', 'POST'])\ndef index():\n    summary = \"\"\n    url = \"\"\n    error = \"\"\n    models = []\n    try:\n        # Configure sua API Key para listar os modelos\n        api_key = request.form.get('api_key', '').strip()",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY', 'sua_chave_secreta_aqui')\n    DEBUG = os.environ.get('DEBUG', True)\n    TESTING = os.environ.get('TESTING', False)\n    # Adicione outras configurações conforme necessário",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "app = create_app()\nif __name__ == \"__main__\":\n    app.run(debug=True, use_reloader=False)",
        "detail": "run",
        "documentation": {}
    }
]